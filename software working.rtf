{\rtf1\ansi\ansicpg1252\cocoartf2865
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Phase 1: Setup (Happens Once)\
\
      Boot Up: The Arduino powers on and runs the setup() function one time.\
      \
      Start Serial: It initializes the Serial Monitor so you can see what it's thinking.\
      \
      Configure Pins: It sets your Relay pin (D8) and Mux select pins (D2, D3, D4) as OUTPUTS.\
      \
      Pump OFF: It immediately sends the PUMP_OFF signal (a LOW) to the relay, ensuring the pump is off by default.\
      \
      Build Map: It runs initializeSensorMap() to load your custom (X, Y) coordinates for all 7 sensors into its memory.\
      \
      Set State: It sets its initial currentState to MONITORING.\
      \
      Start Timer: It logs the current time to lastCheckTime and the main loop() begins.\
\
Phase 2: The Main Loop (Runs Forever)\
\
      The Arduino now lives inside the loop() function, which just checks its current state. Here's the behavior for each state:\
\
  State 1: MONITORING (The "Idle" State)\
\
      The Arduino idles and constantly checks if 1 minute (CHECK_INTERVAL_MS) has passed.\
      \
      If 1 minute has not passed: It does nothing.\
      \
      When 1 minute has passed:\
      \
      It resets its check timer.\
      \
      It runs readAllSensors() to get fresh moisture values for all 7 sensors.\
      \
      It runs checkForCluster() to see if a "dry cluster" exists (i.e., at least 3 sensors are dry and at least two of them are "neighbors").\
      \
      If NO cluster is found: It prints "Field is OK" and goes back to idling for another minute.\
      \
      If a cluster IS found:\
      \
      It prints "Dry cluster found!"\
      \
      It sends the PUMP_ON signal to the relay.\
      \
      It records the exact time in pumpStartTime.\
      \
      It switches its currentState to IRRIGATING.\
\
  State 2: IRRIGATING (The "Watering" State)\
\
      The pump is now ON and running.\
      \
      The Arduino first checks if the "Minimum Run Time" (5 minutes, or MIN_PUMP_ON_TIME_MS) has passed.\
      \
      If 5 minutes have not passed: It does nothing. It must keep the pump on to ensure the field gets a good soak.\
      \
      When 5 minutes have passed:\
      \
      It enters a new, faster checking mode (every 10 seconds).\
      \
      It runs checkIfAllSensorsWet(), which checks if ALL 7 sensors are wetter than your WET_THRESHOLD (e.g., 400).\
      \
      If NO (some sensors are still dry): It prints "Not wet enough" and keeps the pump ON. It will check again in 10 seconds.\
      \
      If YES (all sensors are now wet):\
      \
      It prints "Field is now fully wet."\
      \
      It sends the PUMP_OFF signal to the relay.\
      \
      It records the exact time in wateringStopTime.\
      \
      It switches its currentState to WAITING.\
\
State 3: WAITING (The "Cooldown" State)\
\
      The pump is now OFF.\
      \
      The system is in a "lockout" to let the water soak in.\
      \
      The Arduino constantly checks if the "Cooldown Period" (4 hours, or POST_IRRIGATION_WAIT_TIME_MS) has passed.\
      \
      If 4 hours have not passed: It does nothing. It simply waits.\
      \
      When 4 hours have passed:\
      \
      It prints "Cooldown complete."\
      \
      It switches its currentState back to MONITORING.\
\
...And the entire cycle starts over again from State 1.}